name: Auto Release & Publish to PyPI

on:
  push:
    tags:
      - '*' # Trigger on tags like v1.0, v1.0.0, v2.0-beta, etc.

jobs:
  build_on_windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get all history for tag resolution

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Build sdist and wheel
        run: uv build

      # Optional: Verify built packages (not strictly necessary for the workflow, but good practice)
      - name: Check built packages
        run: |
          ls dist/
          # Optional: python -m twine check dist/*

      - name: Upload distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/
          retention-days: 1 # Keep artifacts for a short period

 # Job 2: Create GitHub Release (can be on Windows or Linux) and publish to PyPI on Linux
  release_and_pypi:
    runs-on: ubuntu-latest # Run this job on a Linux runner
    needs: build_on_windows # This job depends on 'build_on_windows' job completing successfully
    permissions:
      contents: write # Required for creating GitHub Release
      id-token: write # Required for PyPI Trusted Publishers

    steps:
      - name: Checkout code # Required to access repository details for GitHub Release
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download distributions artifact
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist/ # Downloads artifacts into the 'dist/' directory in this job

      # Create GitHub Release (can be done after downloading artifacts)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for tag `${{ github.ref_name }}`.
          draft: false
          prerelease: false
          # Upload all downloaded distributions as release assets
          files: |
            ./dist/*.tar.gz
            ./dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish to PyPI (using the PyPA action on Linux)
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        # The 'path' parameter defaults to 'dist/', so it's often not needed.
        # Make sure your built packages are in the 'dist/' directory after download.
        # path: dist/ # Explicitly specify if your artifacts are in a different subfolder within the downloaded artifact
        # No need for TWINE_USERNAME or TWINE_PASSWORD with trusted publishers
