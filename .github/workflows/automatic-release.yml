name: Auto Release & Publish to PyPI

on:
  push:
    tags:
      - '*' # Trigger on tags like v1.0, v1.0.0, v2.0-beta, etc.

jobs:
  release_and_pypi:
    runs-on: windows-latest
    permissions:
      contents: write # Required for creating GitHub Release
      id-token: write # Required for trusted publishing (optional, see note below)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get all history for tag resolution

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Build sdist and wheel
        run: uv build

      # Optional: Verify built packages (not strictly necessary for the workflow, but good practice)
      - name: Check built packages
        run: |
          ls dist/
          # Optional: python -m twine check dist/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for tag `${{ github.ref_name }}`.
          draft: false
          prerelease: false
          # Upload all built distributions as release assets
          assets: |
            ./dist/*.tar.gz
            ./dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          python -m pip install -U twine
          python -m twine upload --repository pypi dist/*
        env:
          TWINE_USERNAME: __token__ # Use __token__ for API token authentication
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }} # Your PyPI API token stored as a secret
